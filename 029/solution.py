#! encoding: utf8
from prime import Prime
from profile_decorate import profile

"""
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
"""

prime_list = list()
prime_ins = Prime()
for prime in prime_ins.get_prime():
    if prime > 100:
        break
    else:
        prime_list.append(prime)


def is_prime(n=None):
    for i in range(2, n):
        if n % i == 0:
            return False
    else:
        return True


def find_ingredient(n=None):
    ingredient_array = dict()
    while n > 1:
        for p in prime_list:
            if n % p == 0:
                if p in ingredient_array:
                    ingredient_array[p] += 1
                else:
                    ingredient_array[p] = 1
                n /= p
                continue

    return ingredient_array


@profile
def main():
    combination_array = set()
    MAX_A = 100
    MAX_B = 100
    for a in range(2, MAX_A + 1):
        if is_prime(a):
            for b in range(2, MAX_B + 1):
                combination_array.add(str(a) * b)
        else:
            ingredient_array = sorted(find_ingredient(a).items())
            for b in range(2, MAX_B + 1):
                ingredient_str = ''
                for ingre_prime in ingredient_array:
                    ingredient_str += str(ingre_prime[0]) * b * ingre_prime[1]
                combination_array.add(ingredient_str)

    print len(combination_array)


if __name__ == '__main__':
    main()

